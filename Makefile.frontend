include Makefile.config

include $(COMPCERTADIR)/Makefile.config
include $(COMPCERTADIR)/Makefile.menhir

ifeq ($(wildcard $(COMPCERTADIR)/$(ARCH)_$(BITSIZE)),)
ARCHDIRS=$(ARCH)
else
ARCHDIRS=$(ARCH)_$(BITSIZE) $(ARCH)
endif

FRONTENDDIR=frontend
EXTRACTIONDIR=$(FRONTENDDIR)/extraction
FILES=AClight.v BuildAnnotation.v ClassifyComment.v ClightC.v
EXECUTABLES=aclightgen aclightgen.byte

# Coq compilation variables

RECDIRS=lib common $(ARCHDIRS) backend cfrontend driver flocq exportclight cparser

COQFLAGS=$(foreach d, $(RECDIRS), -R $(COMPCERTADIR)/$(d) compcert.$(d)) -R $(FRONTENDDIR) frontend

DEPFLAGS:=$(COQFLAGS)
COQC=$(COQBIN)coqc
COQTOP=$(COQBIN)coqtop
COQEXEC="$(COQBIN)coqtop" $(COQFLAGS) -batch -load-vernac-source
COQDEP=$(COQBIN)coqdep $(DEPFLAGS)
COQDOC=$(COQBIN)coqdoc -d doc/html -g  $(DEPFLAGS)

# Ocaml compilation variables

DIRS=\
  $(patsubst %, $(COMPCERTADIR)/%, extraction \
  lib common $(ARCH) backend cfrontend cparser driver \
  exportclight debug)\
  $(FRONTENDDIR) $(EXTRACTIONDIR)

INCLUDES=$(patsubst %,-I %, $(DIRS))

# Control of warnings:
WARNINGS=-w +a-4-9-27 -strict-sequence -safe-string -warn-error +a #Deprication returns with ocaml 4.03
$(EXTRACTIONDIR)/%.cmx: WARNINGS +=-w -20-27-32..34-39-41-44..45
$(EXTRACTIONDIR)/%.cmo: WARNINGS +=-w -20-27-32..34-39-41-44..45

COMPFLAGS+=-g $(INCLUDES) $(MENHIR_INCLUDES) #$(WARNINGS)
ifeq ($(OCAML_OPT_COMP),true)
DOTOPT=.opt
else
DOTOPT=
endif

OCAMLC=ocamlc$(DOTOPT) $(COMPFLAGS)
OCAMLOPT=ocamlopt$(DOTOPT) $(COMPFLAGS)
OCAMLDEP=ocamldep$(DOTOPT) -slash $(INCLUDES)

MODORDER=$(COMPCERTADIR)/tools/modorder .depend.extr

LIBS=str.cmxa unix.cmxa $(MENHIR_LIBS)
LIBS_BYTE=$(patsubst %.cmxa,%.cma,$(patsubst %.cmx,%.cmo,$(LIBS)))

.PHONY: frontend
frontend: compcert.ini $(FRONTENDDIR)/STAMP

ifneq ($(MAKECMDGOALS), clean) # only if the goal is not clean, include actual make rules

.PHONY: depend
depend .depend.frontend:
	@echo "Analyzing Coq dependencies"
	@$(COQDEP) $(patsubst %, $(FRONTENDDIR)/%, $(FILES)) > .depend.frontend

include .depend.frontend

ifneq (, $(wildcard .depend.frontend)) # the following rules are only applicable when .depend.frontend is included

%.vo: %.v
	@echo "COQC $*.v"
	@$(COQC) $(COQFLAGS) $*.v

extraction: $(EXTRACTIONDIR)/STAMP

$(EXTRACTIONDIR)/STAMP: $(patsubst %.v, $(FRONTENDDIR)/%.vo, $(FILES)) $(EXTRACTIONDIR)/extraction.v
	@echo "Making extraction"
	@rm -f $(EXTRACTIONDIR)/*.ml $(EXTRACTIONDIR)/*.mli
	@$(COQEXEC) $(EXTRACTIONDIR)/extraction.v
	@touch $(EXTRACTIONDIR)/STAMP

include $(EXTRACTIONDIR)/STAMP # an empty file, to force reloading Makefile after making extraction

ifneq (, $(wildcard $(EXTRACTIONDIR)/STAMP)) # the following rules are only applicable when $(EXTRACTIONDIR)/STAMP exists

# Build Ocaml

.depend.extr: $(EXTRACTIONDIR)/STAMP
	@echo "Analyzing OCaml dependencies"
	@$(OCAMLDEP) $(foreach d,$(DIRS),$(wildcard $(d)/*.ml)) >.depend.extr || { rm -f .depend.extr; exit 2; }
	@$(OCAMLDEP) $(foreach d,$(DIRS),$(wildcard $(d)/*.mli)) >>.depend.extr || { rm -f .depend.extr; exit 2; }

include .depend.extr

ifneq (, $(wildcard .depend.extr)) # the following rules are only applicable when .depend.extr is included

%.cmi: %.mli
	@echo "OCAMLC   $<"
	@$(OCAMLC) -c $<
%.cmo: %.ml
	@echo "OCAMLC   $<"
	@$(OCAMLC) -c $<
%.cmx: %.ml
	@echo "OCAMLOPT $<"
	@$(OCAMLOPT) -c $<

ACLIGHTGEN_OBJS:=$(shell $(MODORDER) $(FRONTENDDIR)/AClightgen.cmx)

aclightgen: $(ACLIGHTGEN_OBJS)
	@echo "Linking $@"
	@$(OCAMLOPT) -o $@ $(LIBS) $(LINK_OPT) $+

aclightgen.byte: $(ACLIGHTGEN_OBJS:.cmx=.cmo)
	@echo "Linking $@"
	@$(OCAMLC) -o $@ $(LIBS_BYTE) $+

$(FRONTENDDIR)/STAMP: aclightgen
	@touch $(FRONTENDDIR)/STAMP

endif # if .depend.extr exists
endif # if $(EXTRACTIONDIR)/STAMP exists
endif # if .depend.frontend exists

compcert.ini: $(COMPCERTADIR)/compcert.ini
	@cp $(COMPCERTADIR)/compcert.ini compcert.ini

endif # if the goal is not clean

.PHONY: clean
clean:
	@rm -f compcert.ini $(FRONTENDDIR)/STAMP
	@rm -f $(EXECUTABLES)
	@for d in $(FRONTENDDIR) $(EXTRACTIONDIR); do rm -f $$d/*.cm[iotx] $$d/*cmti $$d/*.o; done
	@rm -f $(EXTRACTIONDIR)/STAMP $(EXTRACTIONDIR)/*.ml $(EXTRACTIONDIR)/*.mli
	@rm -f .depend.extr
	@rm -f $(FRONTENDDIR)/*.vo
	@rm -f $(FRONTENDDIR)/.*.aux
	@rm -f $(FRONTENDDIR)/*.glob
	@rm -f .depend.frontend
